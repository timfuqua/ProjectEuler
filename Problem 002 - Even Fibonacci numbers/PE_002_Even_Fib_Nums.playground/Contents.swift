// Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import UIKit
import Foundation

func test01() {
  let numFibNumsUnder4Mil: Int = 34
  var fibNums: [UInt64] = [0,1]
  var nextFibNumIndex: Int = 2
  
  func nextFibNum() -> UInt64 {
    return fibNums[nextFibNumIndex-1] + fibNums[nextFibNumIndex-2]
  }
  
  while nextFibNumIndex < numFibNumsUnder4Mil {
    fibNums.append(nextFibNum())
    nextFibNumIndex++
  }
  
  for number in fibNums {
    print(number)
    print(" ")
  }
  println()
  
  var sumEvenFibNums: UInt64 = 0
  let numEvenFibNums: Int = (fibNums.count-1)/3
  for i in 1...numEvenFibNums {
    sumEvenFibNums += fibNums[i*3]
  }
  
  println(sumEvenFibNums)
}

func euler() {
  var x: UInt64 = 1
  var y: UInt64 = 1
  var sum: UInt64 = 0
  
  while sum < 4_000_000 {
    sum += (x+y)
    var temp = x
    x = x + 2*y
    y = 2*temp + 3*y
  }
  
  println(sum)
}

test01()
euler()
